
kill $(lsof -t -i:3000,3001) 



function appFactory () {

  if (process.env['NODE_ENV'] !== 'production') {
    configure({
      isolateGlobalState: true
    })
  }

  const routerStore = new RouterStore()

  if (typeof window !== 'undefined') {
    routerStore.initializeStore('routerStore')
  }
  createUtility({
    implements: IMobxStore,
    name: 'RouterStore',
    store: routerStore
  }).registerWith(globalRegistry)

  return (
      <Provider routerStore={routerStore} >
        <ProgressLayer>
          <Switch>
            <Route path='/admin/kursutveckling' component={AdminForm} asyncBefore={AdminForm.fetchData} />
            <Route path='/' component={AdminForm} />
          </Switch>
        </ProgressLayer>
        </Provider>
    )
}

function doAllAsyncBefore ({
    pathname,
    query,
    routerStore,
    routes})
  {
  const queryParams = queryString.parse(query)

  const matches = routes.map((route) => {
    const { exact, leaf, path, asyncBefore} = route.props
    return {
      match: matchPath(pathname, { path, exact: leaf }),
      query: queryParams,
      asyncBefore
    }
  })

    /* if (asyncBefore) {
      return asyncBefore(routerStore, match, query)
    }*/

  return Promise.resolve()
}

@inject(['routerStore'])
  class ProgressLayer extends Component {
  constructor (props, context) {
    super(props)
    this.state = {
      context,
      id: 'test'
    }

      // this.doContinueNavigation = this.doContinueNavigation.bind(this)
      // this.doCancelNavigation = this.doCancelNavigation.bind(this)
      // this.didChangeLocation = this.didChangeLocation.bind(this)
  }

  getChildContext () {
    return this.state.context
  }

  componentWillReceiveProps (nextProps, nextContext) {
    if (nextContext.router.route.location.key !== this.context.router.route.location.key) {
      const asyncBeforeProps = {
        pathname: nextContext.router.route.location.pathname,
        query: nextContext.router.route.location.search,
        routerStore: nextProps.routerStore,
        routes: nextProps.children.props.children,
        nextContext,
        nextProps
      }

        // Continue with page change
      doAllAsyncBefore(asyncBeforeProps).then((res) => {
        this.setState({ context: nextContext })
      })
    }
  }

  doContinueNavigation () {
    this.props.routerStore.didCancelEdits()

    if (this.asyncBeforeProps) {
      return doAllAsyncBefore(this.asyncBeforeProps).then((res) => {
        this.setState({
          context: this.asyncBeforeProps.nextContext,
          showIsEditingModal: false
        })
        this.asyncBeforeProps = undefined
      })

    }

      // Leaving page
  }

  doCancelNavigation () {
    // Revert the addressbar since it is changed prior to reaching the modal
    this.state.context.router.history.replace(this.state.context.router.route.location.pathname)
    this.setState({
      showIsEditingModal: false
    })
    this.asyncBeforeProps = undefined
  }

  render ({ routerStore }) {
   // console.log("this.props",this.props)
    return (
      <div>
        {this.props.children}
      </div>
    )
  }
}

if (typeof window !== 'undefined') {
  // console.log("appFactory",appFactory());

  render(<BrowserRouter>{appFactory()}</BrowserRouter>, document.getElementById('kth-kursutveckling-admin'))
}

export {
    appFactory,
    doAllAsyncBefore
}






&& Object.keys(courseResult.examinationSets).length > 0 && courseResult.examinationSets[Object.keys(courseResult.examinationSets)[0]].hasOwnProperty('examinationRounds') ? this.getExamObject(courseResult.examinationSets[Object.keys(courseResult.examinationSets)[0]].examinationRounds, courseResult.formattedGradeScales, language): EMPTY[language]
APPLICATION_INSIGHTS_IKEY: "a2fb9426-b726-4cfd-924c-5515105527b0"

  <br /><br /><br />
        <Row key='preview' id='preview-container'>

        <Col sm='3' className='col-temp'>
          <h4>ID </h4>
              <p id='id' key='id' >{this.state.values.id}</p>
              <h4>course code </h4>
              <p id='courseCode' key='courseCode'>{this.state.values.courseCode}</p>
              <h4>round name </h4>
              <p id='round' key='round' >{this.state.values.round}</p>
              </Col>
            <Col sm='3' className='col-temp'>
              <h4>programmes </h4>
              <p id='programmeCodes' key='programmeCodes' >{this.state.values.programmeCodes} </p>
              <h4>examiners </h4>
              <p id='examiners' key='examiners' >{this.state.values.examiners}</p>
              <h4>responsibles </h4>
              <p id='responsibles' key='responsibles' >{this.state.values.responsibles}</p>
            </Col>
            <Col sm='3' className='col-temp' >
            <h4>examinationRounds </h4>
              <p id='examinationRounds' key='examinationRounds' >{this.state.values.examinationRounds}</p>
              <h4>registered students </h4>
              <p id='registeredStudents' key='registeredStudents' >{this.state.values.registeredStudents}</p>
              <h4>examination grade </h4>
              <p id='examinationGrade' key='examinationGrade' >{this.state.values.examinationGrade} </p>
            </Col>
            <Col sm='3' className='col-temp'>
              <h4>alteration text </h4>
              <p id='alterationText' key='alterationText' >{this.state.values.alterationText}</p>
              <h4>commentChange </h4>
              <p id='commentChange' key='commentChange' >{this.state.values.commentChange}</p>
              <h4>commentExam </h4>
              <p id='commentExam' key='commentExam' >{this.state.values.commentExam}</p>
              </Col>
              <Button id='Save' key='Save' onClick={this.handlePublish}>Publish</Button>

        </Row>
        <br />
        <p>--------------------------------------------------------------------------------------------------------------------------</p>
        <br />
        <Row key='form' id='form-container'>

          <Col>
          {this.state.saved ?
             <Alert>
              Finimangsparat
              </Alert>
            : ''}
             <Form.Label>ID</Form.Label>
            <Form.Control id='id' key='id' type='text' value={this.state.values.id} onInput={this.handleInputChange} />
            <Form.Label>course code</Form.Label>
            <Form.Control id='courseCode' key='courseCode' type='text' value={this.state.values.courseCode} onInput={this.handleInputChange} />


            <Form>
              Test data...<br />
              <Form.Label>round name</Form.Label>
              <Form.Control id='round' key='round' type='text' value={this.state.values.round} onInput={this.handleInputChange} />
              <Form.Label>Programmes</Form.Label>
              <Form.Control id='programmeCodes' key='programmeCodes' type='text' value={this.state.values.programmeCodes} onInput={this.handleInputChange} />
              <Form.Label>examiners</Form.Label>
              <Form.Control id='examiners' key='examiners' type='text' value={this.state.values.examiners} onInput={this.handleInputChange} />
              <Form.Label>responsibles</Form.Label>
              <Form.Control id='responsibles' key='responsibles' type='text' value={this.state.values.responsibles} onInput={this.handleInputChange} />
              <Form.Label>examinationRounds</Form.Label>
              <Form.Control id='examinationRounds' key='examinationRounds' type='text' value={this.state.values.examinationRounds} onInput={this.handleInputChange} />
              <Form.Label>registered students</Form.Label>
              <Form.Control id='registeredStudents' key='registeredStudents' type='text' value={this.state.values.registeredStudents} onInput={this.handleInputChange} />
              <Form.Label>examination grade</Form.Label>
              <Form.Control id='examinationGrade' key='examinationGrade' type='text' value={this.state.values.examinationGrade} onInput={this.handleInputChange} />

              <Form.Label>alteration text</Form.Label>
              <Form.Control id='alterationText' key='alterationText' type='text' value={this.state.values.alterationText} onInput={this.handleInputChange} />
              <Form.Label>commentChange</Form.Label>
              <Form.Control id='commentChange' key='commentChange' type='text' value={this.state.values.commentChange} onInput={this.handleInputChange} />
              <Form.Label>commentExam</Form.Label>
              <Form.Control id='commentExam' key='commentExam' type='text' value={this.state.values.commentExam} onInput={this.handleInputChange} />
              <Button id='Save' key='Save' onClick={this.handleSave}>Save</Button>
            </Form>
          </Col>
        </Row>